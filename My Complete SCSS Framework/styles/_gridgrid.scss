$grid-columns: 12;
$grid-gaps : (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

// to justify content
$layout-values: flex-start, flex-end, center, space-between, space-around;

// layout

.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto; //to center
  box-sizing: border-box; //to incorporate padding and border into total width
  display: grid;
  grid-template-columns: repeat($grid-columns, 1fr); // create 12 columns with equal width
  grid-gap: 10px; // spacing between grid items
}

.row {
  display: contents; // hide the row element so that child elements can be placed directly on the grid
}

// grid gaps
// to apply padding to each grid item
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
}

// justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

// column classes
@include small {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-small {
      box-sizing: border-box;
      grid-column: span $i; // occupy $i columns
    }
  }
}

@include medium {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-medium {
      box-sizing: border-box;
      grid-column: span $i; // occupy $i columns
    }
  }
}

@include large {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-large {
      box-sizing: border-box;
      grid-column: span $i; // occupy $i columns
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      grid-column: span $i; // occupy $i columns
    }
  }
}
