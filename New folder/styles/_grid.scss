@use "sass:math";

$grid-columns: 12;
$grid-gaps : (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

// layout

.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto; //to center
  padding: 0 20px;
  box-sizing: border-box; //to incorporate padding and border into total width
}

.row {
  display: flex; //every column will be a flex item
  flex-flow: row wrap; // if screen gets smaller columns are wrapped down to the next row
}

// grid gaps
// to apply padding to each flex item, direct descendant> and * to be anything, a p , div etc.
// the margine left -val ill shift to counter padding so we do not have a big space
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
  }
}

// column classes
@include small {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-small {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);

    }
  }
}

@include medium {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-medium {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid-columns);

    }
  }
}

@include large {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-large {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid-columns);

    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid-columns);

    }
  }
}
